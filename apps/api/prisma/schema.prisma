
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(uuid())
  email                   String                  @unique
  firstName              String
  lastName               String
  password                String
  phoneNumber             String?                 @unique
  role                    Role
  verified                Boolean                 @default(false)
  LGA                     String?                 
  isLagosian              Boolean                 @default(false)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  refreshTokenSessions    RefreshTokenSession?   
  vendorProfile           VendorProfile?

  @@map("users")
}

enum Role {
  BUYER
  VENDOR
  ADMIN
}

model VendorProfile {
  id       String @id @default(uuid())
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products   Product[]
  categories Category[]

  @@map("vendor_profile")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vendorProfileId String
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt


  vendorProfileId String
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)

  products Product[]

  @@map("categories")
}


model RefreshTokenSession {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique                   
  refreshTokenId String   @unique                  
  createdAt      DateTime @default(now())
  expiresAt      DateTime
  revoked        Boolean  @default(false)

  @@map("refresh-token")
}







